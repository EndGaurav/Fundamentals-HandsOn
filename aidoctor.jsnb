{
  "metadata": {
    "name": "New JSNB",
    "language_info": {
      "name": "JavaScipt",
      "version": "8.0"
    }
  },
  "jsnbversion": "v0.1",
  "cells": [
    {
      "code": "//> html \n<div class=\"header\">\n  <h1>ü©∫ AI Doctor</h1>\n</div>\n\n<div class=\"main-container\">\n  <div class=\"column left-column\">\n    <label for=\"imageInput\">Upload Image:</label>\n    <input type=\"file\" id=\"imageInput\" accept=\"image/*\" />\n    <button id=\"analyzeBtn\">Analyze Image</button>\n    <div id=\"result\" class=\"output\"></div>\n  </div>\n\n  <div class=\"column right-column\">\n    <button id=\"recordBtn\">üéôÔ∏è Start Recording</button>\n    <audio id=\"audioPlayback\" controls style=\"display:none;\"></audio>\n    <button id=\"transcribeBtn\" disabled>üìù Transcribe</button>\n    <div id=\"transcriptionResult\" class=\"output\"></div>\n  </div>\n</div>\n",
      "status": "[37]<br><span style=\"font-size:8px\">2ms<span></span></span>",
      "output": " \n<div class=\"header\">\n  <h1>ü©∫ AI Doctor</h1>\n</div>\n\n<div class=\"main-container\">\n  <div class=\"column left-column\">\n    <label for=\"imageInput\">Upload Image:</label>\n    <input type=\"file\" id=\"imageInput\" accept=\"image/*\">\n    <button id=\"analyzeBtn\">Analyze Image</button>\n    <div id=\"result\" class=\"output\">With what I see, I think you have acne on your face, which appears to be moderate with multiple red bumps and pimples, suggesting possible inflammation and bacterial involvement. I would suggest using topical creams or gels containing benzoyl peroxide or salicylic acid to help reduce acne, and if it persists, oral antibiotics or retinoids may be needed to treat the condition effectively.</div>\n  </div>\n\n  <div class=\"column right-column\">\n    <button id=\"recordBtn\">üéôÔ∏è Start Recording</button>\n    <audio id=\"audioPlayback\" controls=\"\" style=\"display: block;\" src=\"blob:https://app.scribbler.live/93db0a0e-d1bb-472b-82da-aedb2405de9b\"></audio>\n    <button id=\"transcribeBtn\">üìù Transcribe</button>\n    <div id=\"transcriptionResult\" class=\"output\"> Can you tell me what is exactly happening on my face?</div>\n  </div>\n</div>\n <br>",
      "type": "code"
    },
    {
      "code": "//> css \nbody {\n  margin: 0;\n  font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\n  // background: linear-gradient(135deg, #1e1e2f, #2c2c3f);\n  color: #ffffff;\n}\n\n.header {\n  text-align: center;\n  padding: 20px 0;\n  background-color: #1a1a2e;\n  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.3);\n}\n\n.header h1 {\n  margin: 0;\n  font-size: 2.5em;\n  color: #00bcd4;\n}\n\n.main-container {\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: center;\n  padding: 40px 20px;\n  gap: 40px;\n}\n\n.column {\n  flex: 1 1 300px;\n  max-width: 400px;\n  background-color: #2a2a3d;\n  padding: 20px;\n  border-radius: 12px;\n  box-shadow: 0 8px 16px rgba(0, 0, 0, 0.5);\n}\n\n.column label {\n  display: block;\n  margin-bottom: 10px;\n  font-weight: 600;\n  color: #00bcd4;\n}\n\n.column input[type=\"file\"] {\n  width: 100%;\n  padding: 10px;\n  margin-bottom: 20px;\n  background-color: #3a3a4d;\n  border: none;\n  border-radius: 8px;\n  color: #ffffff;\n}\n\n.column button {\n  width: 100%;\n  padding: 12px;\n  margin-bottom: 20px;\n  background-color: #00bcd4;\n  border: none;\n  border-radius: 8px;\n  color: #ffffff;\n  font-size: 16px;\n  cursor: pointer;\n  transition: background-color 0.3s ease;\n}\n\n.column button:hover {\n  background-color: #0198a5;\n}\n\n.column button:disabled {\n  background-color: #555;\n  cursor: not-allowed;\n}\n\n.output {\n  background-color: #1a1a2e;\n  padding: 15px;\n  border-radius: 8px;\n  min-height: 60px;\n  white-space: pre-wrap;\n  font-family: 'Courier New', Courier, monospace;\n  color: #ffffff;\n  box-shadow: inset 0 0 10px rgba(0, 0, 0, 0.5);\n}\n",
      "status": "[38]<br><span style=\"font-size:8px\">0ms<span></span></span>",
      "output": "<style> \nbody {\n  margin: 0;\n  font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\n  // background: linear-gradient(135deg, #1e1e2f, #2c2c3f);\n  color: #ffffff;\n}\n\n.header {\n  text-align: center;\n  padding: 20px 0;\n  background-color: #1a1a2e;\n  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.3);\n}\n\n.header h1 {\n  margin: 0;\n  font-size: 2.5em;\n  color: #00bcd4;\n}\n\n.main-container {\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: center;\n  padding: 40px 20px;\n  gap: 40px;\n}\n\n.column {\n  flex: 1 1 300px;\n  max-width: 400px;\n  background-color: #2a2a3d;\n  padding: 20px;\n  border-radius: 12px;\n  box-shadow: 0 8px 16px rgba(0, 0, 0, 0.5);\n}\n\n.column label {\n  display: block;\n  margin-bottom: 10px;\n  font-weight: 600;\n  color: #00bcd4;\n}\n\n.column input[type=\"file\"] {\n  width: 100%;\n  padding: 10px;\n  margin-bottom: 20px;\n  background-color: #3a3a4d;\n  border: none;\n  border-radius: 8px;\n  color: #ffffff;\n}\n\n.column button {\n  width: 100%;\n  padding: 12px;\n  margin-bottom: 20px;\n  background-color: #00bcd4;\n  border: none;\n  border-radius: 8px;\n  color: #ffffff;\n  font-size: 16px;\n  cursor: pointer;\n  transition: background-color 0.3s ease;\n}\n\n.column button:hover {\n  background-color: #0198a5;\n}\n\n.column button:disabled {\n  background-color: #555;\n  cursor: not-allowed;\n}\n\n.output {\n  background-color: #1a1a2e;\n  padding: 15px;\n  border-radius: 8px;\n  min-height: 60px;\n  white-space: pre-wrap;\n  font-family: 'Courier New', Courier, monospace;\n  color: #ffffff;\n  box-shadow: inset 0 0 10px rgba(0, 0, 0, 0.5);\n}\n</style> <br>",
      "type": "code"
    },
    {
      "code": "// Function to convert image file to base64\nfunction encodeImageToBase64(file) {\n  return new Promise((resolve, reject) => {\n    const reader = new FileReader();\n    reader.onload = () => resolve(reader.result.split(',')[1]);\n    reader.onerror = error => reject(error);\n    reader.readAsDataURL(file);\n  });\n}\n\n// Function to handle the analyze button click\nasync function handleAnalyzeClick() {\n  const imageInput = document.getElementById('imageInput');\n  const resultDiv = document.getElementById('result');\n\n  if (!imageInput.files[0]) {\n    resultDiv.textContent = 'Please upload an image.';\n    return;\n  }\n\n  try {\n    resultDiv.textContent = 'Processing...';\n\n    const base64Image = await encodeImageToBase64(imageInput.files[0]);\n\n    const payload = {\n      model: \"meta-llama/llama-4-scout-17b-16e-instruct\",\n      messages: [\n        {\n          role: \"system\",\n          content: `You have to act as a professional doctor, i know you are not but this is for learning purpose. \nWhat's in this image?. Do you find anything wrong with it medically? \nIf you make a differential, suggest some remedies for them. Do not add any numbers or special characters in \nyour response. Your response should be in one long paragraph. Also always answer as if you are answering to a real person.\nDo not say 'In the image I see' but say 'With what I see, I think you have ....'\nDo not respond as an AI model in markdown, your answer should mimic that of an actual doctor not an AI bot, \nKeep your answer concise (max 2 sentences). No preamble, start your answer right away please`\n        },\n        {\n          role: \"user\",\n          content: [\n            {\n              type: \"image_url\",\n              image_url: {\n                url: `data:image/jpeg;base64,${base64Image}`,\n              },\n            },\n          ],\n        },\n      ],\n    };\n\n    const response = await fetch('https://api.groq.com/openai/v1/chat/completions', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer GROQ_API_KEY' // Replace with your actual key\n      },\n      body: JSON.stringify(payload),\n    });\n\n    const data = await response.json();\n\n    if (response.ok) {\n      // Optional: scrib.show(`line 76: ${data.choices[0].message.content}`)\n      resultDiv.textContent = data.choices[0].message.content;\n    } else {\n      resultDiv.textContent = `Error: ${data.error.message}`;\n    }\n  } catch (error) {\n    resultDiv.textContent = `An error occurred: ${error.message}`;\n  }\n}\n\n// Attach event listener to the analyze button\ndocument.getElementById('analyzeBtn').addEventListener('click', handleAnalyzeClick);\n",
      "status": "[40]<br><span style=\"font-size:8px\">0ms<span></span></span>",
      "output": "",
      "type": "code"
    },
    {
      "code": "\nlet mediaRecorder;\nlet recordedChunks = [];\n\nconst recordBtn = document.getElementById('recordBtn');\nconst transcribeBtn = document.getElementById('transcribeBtn');\nconst audioPlayback = document.getElementById('audioPlayback');\nconst transcriptionResult = document.getElementById('transcriptionResult');\n\nrecordBtn.addEventListener('click', async () => {\n  if (recordBtn.textContent.includes('Start')) {\n    recordedChunks = [];\n    const stream = await navigator.mediaDevices.getUserMedia({ audio: true });\n    mediaRecorder = new MediaRecorder(stream);\n    mediaRecorder.ondataavailable = event => {\n      if (event.data.size > 0) recordedChunks.push(event.data);\n    };\n    mediaRecorder.onstop = () => {\n      const audioBlob = new Blob(recordedChunks, { type: 'audio/webm' });\n      const audioURL = URL.createObjectURL(audioBlob);\n      audioPlayback.src = audioURL;\n      audioPlayback.style.display = 'block';\n      transcribeBtn.disabled = false;\n    };\n    mediaRecorder.start();\n    recordBtn.textContent = 'üõë Stop Recording';\n  } else {\n    mediaRecorder.stop();\n    recordBtn.textContent = 'üéôÔ∏è Start Recording';\n  }\n});\n\ntranscribeBtn.addEventListener('click', async () => {\n  transcriptionResult.textContent = 'Transcribing...';\n  const audioBlob = new Blob(recordedChunks, { type: 'audio/webm' });\n  const formData = new FormData();\n  formData.append('file', audioBlob, 'recording.webm');\n  formData.append('model', 'whisper-large-v3');\n  formData.append('language', 'en');\n\n  try {\n    const response = await fetch('https://api.groq.com/openai/v1/audio/transcriptions', {\n      method: 'POST',\n      headers: {\n        'Authorization': 'Bearer GROQ_API_KEY' // Replace with your actual API key\n      },\n      body: formData\n    });\n\n    if (!response.ok) {\n      const errorData = await response.json();\n      transcriptionResult.textContent = `Error: ${errorData.error.message}`;\n      return;\n    }\n\n    const data = await response.json();\n    transcriptionResult.textContent = data.text;\n  } catch (error) {\n    transcriptionResult.textContent = `An error occurred: ${error.message}`;\n  }\n});\n",
      "status": "[39]<br><span style=\"font-size:8px\">0ms<span></span></span>",
      "output": "",
      "type": "code"
    }
  ],
  "source": "https://github.com/gopi-suvanam/scribbler",
  "run_on_load": false
}
